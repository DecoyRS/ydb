name: Weekly Changelog Update

on:
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at 00:00:00

  push:
    branches:
      - main
      - stable-*
env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  gather-prs:
    runs-on: ubuntu-latest
    outputs:
      prs: ${{ steps.pr-list.outputs.prs }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50

      - name: Set up date range
        id: date-setup
        run: |
          LAST_WEEK_DATE=$(date -d "7 days ago" '+%Y-%m-%dT%H:%M:%SZ')
          echo "LAST_WEEK_DATE=$LAST_WEEK_DATE" >> $GITHUB_ENV

      - name: Fetch commits from the last 7 days
        run: |
          # Calculate the date 7 days ago
          date_since=$(date -d '7 days ago' --utc +%Y-%m-%dT%H:%M:%SZ)

          # Fetch all commits since the last 7 days
          git fetch --shallow-since="$LAST_WEEK_DATE"

      - name: Get parent branch and branch creation date
        id: branch-info
        run: |

          # Get the current branch name
          branch_name=${GITHUB_REF_NAME}

          echo "Current branch: $branch_name"

          # Get the timestamp for 1 week ago
          one_week_ago=$(date -d '7 days ago' --utc +%s)

          # Start with the latest commit
          commit=$(git rev-parse HEAD)
          parent_branch=""

          while true; do
            echo "Analyzing commit: $commit"

            # Get the commit date in seconds since the epoch
            commit_date=$(git show -s --format=%ct $commit)

            # Break if the commit is older than 1 week
            if [ $commit_date -lt $one_week_ago ]; then
              echo "Reached the 1-week limit. Stopping search."
              break
            fi

            # Check for the parent branches of the current commit
            parents=$(git rev-list --parents -n 1 $commit)
            echo "parents $parents"

            # If there's only one commit hash, it's the root commit
            if [ $(echo "$parents" | wc -w) -eq 1 ]; then
              echo "Root commit found: $commit"
              break
            fi

            # If there's only one parent, continue traversing
            if [ $(echo "$parents" | wc -w) -eq 2 ]; then
              commit=$(echo "$parents" | awk '{print $2}')
              echo "new commit $commit"
            else
              # If multiple parents are found, it's a merge commit
              echo "multiple parents $parents"
              parent_commit=$(echo "$parents" | awk '{print $2}')
              echo "parent commit $parent_commit"
              branches=$(git branch -r --contains $parent_commit | grep -v "$branch_name")
              echo "branches $branches"

              # Iterate through branches to find "main" or "stable-*"
              for branch in $branches; do
                branch=$(echo "$branch"| sed 's/^[ \t]*//;s/[ \t]*$//' | sed 's/^origin\///' )
                if [[ "$branch" == *"main"* || "$branch" == *"stable-"* ]]; then
                  parent_branch=$branch
                  echo "parent branch $parent_branch"
                  break
                fi
              done

              # If a matching parent branch is found, break the loop
              if [ -n "$parent_branch" ]; then
                echo "::notice:: Parent branch is either 'main' or starts with 'stable-'"
                break
              else
                # Continue traversing if no matching parent branch is found
                commit=$parent_commit
              fi
            fi
          done

          # Output the parent branch or root commit
          if [ -n "$parent_branch" ]; then
            echo "::notice:: Parent branch detected: $parent_branch"
          else
            echo "::notice:: No parent branch found. This might be the root branch."
          fi

          if [ -n "$parent_branch" ]; then
            $(git fetch origin $parent_branch:$parent_branch)
            BRANCH_CREATION_DATE=$(git log --reverse --format=%cI $parent_branch..${GITHUB_REF_NAME} | head -n 1)
          else
            BRANCH_CREATION_DATE=$LAST_WEEK_DATE
          fi
          echo "BRANCH_CREATION_DATE=$BRANCH_CREATION_DATE" >> $GITHUB_ENV
          # Save the parent branch to an environment variable
          echo "PARENT_BRANCH=${parent_branch}" >> $GITHUB_ENV

      - name: Get merged PRs based on branch creation date
        id: pr-list
        run: |
          echo "::notice:: branch = ${GITHUB_REF_NAME}, date = $LAST_WEEK_DATE, parent = $PARENT_BRANCH, creation date = $BRANCH_CREATION_DATE"
          if [ -z "$BRANCH_CREATION_DATE" ]; then
            PRS=$(gh pr list --state merged --json number,title,body,baseRefName,mergedAt --jq ".[] | select(.baseRefName == \"${GITHUB_REF_NAME}\" and .mergedAt >= \"$LAST_WEEK_DATE\") | {number: .number, body: .body}" | jq -c -s ".")
          else
            PRS=$(gh pr list --state merged --json number,title,body,baseRefName,mergedAt --jq ".[] | select((.baseRefName == \"$PARENT_BRANCH\" and .mergedAt >= \"$LAST_WEEK_DATE\" and .mergedAt < \"$BRANCH_CREATION_DATE\") or (.baseRefName == \"${GITHUB_REF_NAME}\" and .mergedAt >= \"$BRANCH_CREATION_DATE\")) | {number: .number, body: .body}" | jq -c -s ".")
          fi

          if [ -z "$PRS" ]; then
            PRS="[]"
          fi
          echo "$PRS" > prs.json
          echo "prs=$PRS" >> "$GITHUB_OUTPUT"

      - name: Debug PR list output
        run: |
          cat prs.json | jq '.'

      - name: Upload PRs JSON
        uses: actions/upload-artifact@v3
        with:
          name: prs-json
          path: prs.json

  update-changelog:
    needs: gather-prs
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Get current date
        id: get-date
        shell: bash
        run: echo "suffix=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Update Changelog
        uses: ./.github/actions/update_changelog 
        with:
          pr_data: "${{ needs.gather-prs.outputs.prs }}"
          changelog_path: "./CHANGELOG.md"
          base_branch: "${{ github.ref_name }}"
          suffix: "${{ env.suffix }}"